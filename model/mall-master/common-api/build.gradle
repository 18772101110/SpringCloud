
ext {
    druidVersion = '1.1.10'
    mysqlConnectorVersion = '5.1.46'
    mybatisVersion = '1.3.2'
    fastjsonVersion = '1.2.33'
    pagehelperVersion = '1.2.5'
    jacksonDatatypeJsr310Version = '2.9.6'
    mybatisTypehandlersJsr310Version = '1.0.2'
    commonslang3Version = '3.7'
    commonsCollections4Version = '4.2'
    swaggerVersion = '2.6.1'
    lombokVersion = '1.16.20'
    poiVersion = '3.17'
    throwing_function = '1.3'
    mybatisPlusVersion = '2.2.0 '
}

dependencies {
    configurations {
        all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    compile("org.springframework.boot:spring-boot-starter-undertow")
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-test")
    compile('org.springframework.cloud:spring-cloud-starter-consul-discovery')

    // data
    compile("com.alibaba:druid:${druidVersion}")
    compile("mysql:mysql-connector-java:${mysqlConnectorVersion}")
    compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisVersion}")
    compile("com.github.pagehelper:pagehelper-spring-boot-starter:${pagehelperVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-redis")

    // json
    compile("com.alibaba:fastjson:${fastjsonVersion}")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonDatatypeJsr310Version}")

    // swagger
    compile("io.springfox:springfox-swagger2:${swaggerVersion}")
    //compile("com.zd.swagger:swagger:${swaggerVersion}")

    // lombok
    compile("org.projectlombok:lombok:${lombokVersion}")

    // apache
    compile("org.apache.commons:commons-lang3:${commonslang3Version}")
    compile("org.apache.commons:commons-collections4:${commonsCollections4Version}")

    //微软文档处理工具 apache POI
    compile("org.apache.poi:poi-ooxml:${poiVersion}")

    // alyun oss
    compile 'com.aliyun.oss:aliyun-sdk-oss:2.3.0'
    compile("com.aliyun:aliyun-java-sdk-sts:3.0.0")

    // sso
   // compile("org.springframework.cloud:spring-cloud-starter-oauth2")
    /**
     * mybatis-plus
     *
     */
    compile("com.baomidou:mybatis-plus-boot-starter:2.2.0")

    //mybatis-plus
    //velocity 模板引擎, 默认
    compile group: 'org.apache.velocity', name: 'velocity-engine-core', version: '2.0'
    // freemarker 模板引擎
    compile group: 'org.freemarker', name: 'freemarker', version: '2.3.23'


    compile("com.google.guava:guava")
    compile("org.aspectj:aspectjweaver")
    compile("eu.bitwalker:UserAgentUtils:1.20")
    compile group: 'org.apache.rocketmq', name: 'rocketmq-client', version: '4.2.0'
    compile("org.springframework.boot:spring-boot-configuration-processor")
    /**
     * 流程
     * 需要调用者先使用用户名和密码去签定身份
     * 鉴定成功，服务器返回一个 Token
     * 调用者之后再调用其他 API 时就在 HTTP Authorization Header 中带着这个 Token
     * 生成的token中包含调用者的身份权限认证信息
     */
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    compile group: 'com.arronlong.httpclientutil', name: 'httpclientutil', version: '1.0'
    compile("com.netflix.hystrix:hystrix-core:1.5.10")

    //zk
    compile("org.apache.curator:curator-framework")
    compile("org.apache.curator:curator-client")
    compile("org.apache.curator:curator-recipes")

    compile project(':common-feign-api')
}